#include<stdio.h>
#include<stdlib.h>

 

int validacion(int);
int leerMatriz();
void mostrarMatriz(int );
void ordenarMatriz(int);
void operacionesElementales(int );

 

float matriz[100][101];
                
float  vectorAux[100];

 

int main(){
int n;
n=leerMatriz();
printf("\n\Matriz original:\n");
mostrarMatriz(n);
printf("\n\n\n\n");
printf("\n\Matriz ordenada:\n");
ordenarMatriz(n);
mostrarMatriz(n);
printf("\n\n\n\n");
printf("\n\Matriz solucion:\n");
operacionesElementales(n);
mostrarMatriz(n);

 

system("pause");
}

 

int validacion(int tipoValidacion)
{
    
    if(tipoValidacion==0)
    {
        int N1; 
        do{
        printf("Ingrese un numero:\t");
        fflush(stdin);
        }while(!scanf("%d",&N1));
        return N1;
    }
        else
        {
                float N2;
                do{
                printf("Ingrese un numero:\t");
                fflush(stdin);
                }while(!scanf("%f",&N2));
                return N2;
        }
    
};

 

int  leerMatriz(){
    int n,opc,i,j;
    do{
    printf("ingrese alas dimenciones de la matriz\n"); 
    n=validacion(0);
    printf("seguro que desea una matriz de %d x %d?\n0-si\n1-no\n",n,n);
    opc=validacion(0);
    }while(opc!=0);
    
    printf("ingrese los valores de la matriz segun su posicion\n\n\n");
    for(i=0;i<n;i++)
    {
        for(j=0;j<=n;j++)
        {
            if(j==n)
            printf("Posicion %d del vector solucion:\t",i+1);
            else
            printf("Posicion %d,%d:\t",i+1,j+1);
            matriz[i][j]=validacion(1);
        }
        printf("\n");
    
    }
    return n;
}

 

void mostrarMatriz(int n){
    int i=0,j;
    for(i=0;i<n;i++)
    {
        for(j=0;j<=n;j++)
        {
            if(j==n)
                printf("|");
            printf(" %f\t",matriz[i][j]);
        }    
        printf("\n");
    }
}
void ordenarMatriz(int n){
    int i,j,k,p=0;
    //Primera iteración: Recorre la matriz de inicio a fin.
    for(i=0;i<n;i++){
        for(j=i+1;j<n;j++){
            if(matriz[i][i]==0 && matriz[j][i]!=0){
                for(k=0;k<=n;k++){
                    vectorAux[k]=matriz[i][k];
                    matriz[i][k]=matriz[j][k];
                    matriz[j][k]=vectorAux[k];
                }
            }
        }
        
    }
    //Segunda iteración: Recorre la matriz de fin a inicio.
    for(i=n-1;i>=0;i--){
        for(j=i-1;j>=0;j--){
            if(matriz[i][i]==0 && matriz[j][i]!=0){
                for(k=n;k>=0;k--){
                    vectorAux[k]=matriz[i][k];
                    matriz[i][k]=matriz[j][k];
                    matriz[j][k]=vectorAux[k];
                }
            }
        }
        
    }
    //tercera iteracion 
    for(i=0;i<n;i++){
        for(j=i+1;j<n;j++){
            if(matriz[i][i]==0 && matriz[j][i]!=0){
                for(k=0;k<=n;k++){
                    vectorAux[k]=matriz[i][k];
                    matriz[i][k]=matriz[j][k];
                    matriz[j][k]=vectorAux[k];
                }
            }
        }
        
    }
    printf("\n\n");
}

 

void operacionesElementales(int n){
    int i,j,k,cont=0,z=0;
    float aux,vectpivotes[n];
    for(k=0;k<n;k++){
    
        
        for(i=k;i<n;i++){
                aux=matriz[i][cont];
                for(j=0;j<=n;j++){
                    matriz[i][j]=matriz[i][j]/aux;
                                
                }
        }
        cont++;
        
        for(i=k+1;i<n;i++){
            for(j=0;j<=n;j++){
                matriz[i][j]=matriz[i][j]-matriz[k][j];
            }
        }
    }
    
    for(k=n-1;k>=0;k--){
        for(i=k;i>=0;i--){
            for(j=0;j<=n;j++){
                vectorAux[j]=matriz[i][j];        
            }            
            int a;
            for(a=i-1; a>=0; a--){
                aux=matriz[a][i];
                for(j=0;j<=n;j++){
                    matriz[a][j]=matriz[a][j]-aux*vectorAux[j];    
                }
            }
            
        
        }
    }    
    
}
